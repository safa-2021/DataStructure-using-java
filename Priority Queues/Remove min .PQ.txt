import java.util.ArrayList;

public class PQ {

	private ArrayList<Integer> heap;

	public PQ() {
		heap = new ArrayList<Integer>();
	}

	boolean isEmpty() {
		return heap.size() == 0;
	}

	int size() {
		return heap.size();
	}

	int getMin() throws PriorityQueueException {
		if (isEmpty()) {
			// Throw an exception
			throw new PriorityQueueException();
		}
		return heap.get(0);
	}

	void insert(int element) {
		heap.add(element);
		int childIndex = heap.size() - 1;
		int parentIndex = (childIndex - 1) / 2;

		while (childIndex > 0) {
			if (heap.get(childIndex) < heap.get(parentIndex)) {
				int temp = heap.get(childIndex);
				heap.set(childIndex, heap.get(parentIndex));
				heap.set(parentIndex, temp);
				childIndex = parentIndex;
				parentIndex = (childIndex - 1) / 2;
			} else {
				return;
			}
		}
	}

// 	int removeMin() throws PriorityQueueException {
//         if(heap.size()==0){
//             throw new PriorityQueueException();
//         }
            
//         int temp=heap.get(0);
//         heap.set(0,heap.get(heap.size()-1));
//         heap.remove(heap.size()-1);
//         int i=0;
//         int parent=i;
//         int leftchild=1;
//         int rightchild=2;
        
//         while(leftchild<heap.size() ){
//             if(heap.get(leftchild)<heap.get(parent)){
//                 parent=leftchild;
//             }
//             if(rightchild<heap.size() && heap.get(rightchild)<heap.get(parent)){
//                 parent=rightchild;
//             }
//             if(parent==i){
//                 break;
//             }
//             else{
//                 int temp1=heap.get(i);
//                 heap.set(i,heap.get(parent));
//                 heap.set(parent,temp1);
//                 i=parent;
//                 leftchild=2*i+1;
//                 rightchild=2*i+2;
//             }
            
           
//         }
//         return temp;
// 		// Complete this function
// 		// Throw the exception PriorityQueueException if queue is empty
// 	}
    int removeMin() throws PriorityQueueException{
		// Complete this function
		// Throw the exception PriorityQueueException if queue is empty
        if(heap.size()==0){
            throw new PriorityQueueException();
        }
        int returnValue=heap.get(0);
		heap.set(0, heap.get(heap.size()-1));
		heap.remove(heap.size()-1);
		int parentIndex=0;
		int LchildIndex = (2*parentIndex)+1;
		int RchildIndex = (2*parentIndex)+2;
		
		while(LchildIndex<heap.size()-1  && RchildIndex<heap.size()-1) {
			int temp = heap.get(parentIndex);
			if(heap.get(parentIndex)>heap.get(LchildIndex) || heap.get(parentIndex)>heap.get(RchildIndex)) {
			heap.set(parentIndex, Math.min(heap.get(LchildIndex), heap.get(RchildIndex)));
			if(heap.get(LchildIndex)<heap.get(RchildIndex)){
				heap.set(LchildIndex, temp);
				parentIndex=LchildIndex;
			}else {
				heap.set(RchildIndex, temp);
				parentIndex=RchildIndex;
			}
			LchildIndex = (2*parentIndex)+1;
			RchildIndex = (2*parentIndex)+2;
		}else {
			break;
		}			
		}		
		return returnValue;
	}
}

class PriorityQueueException extends Exception {

}