import java.util.ArrayList;
public class PQ {
	// Complete this class
    private ArrayList<Integer> heap;

	public PQ() {
		heap = new ArrayList<Integer>();
	}

	boolean isEmpty(){
		return heap.size() == 0;
	}

	int getSize(){
		return heap.size();
	}

	int getMax(){
		if(isEmpty()){
			// Throw an exception
			return Integer.MIN_VALUE;
		}
		return heap.get(0);
	}

	void insert(int element){
		heap.add(element);
		int childIndex = heap.size() - 1;
		int parentIndex = (childIndex - 1) / 2;

		while(childIndex > 0){
			if(heap.get(childIndex) > heap.get(parentIndex)){
				int temp = heap.get(childIndex);
				heap.set(childIndex, heap.get(parentIndex));
				heap.set(parentIndex, temp);
				childIndex = parentIndex;
				parentIndex = (childIndex - 1) / 2;
			}else{
				return;
			}
		}
	}

	int removeMax() {
		// Complete this function
		// Throw the exception PriorityQueueException if queue is empty
        if(isEmpty()){
            return Integer.MIN_VALUE;
        }
        int min=heap.get(0);
        heap.set(0,heap.get(heap.size()-1));
        heap.remove(heap.size()-1);
        int parent=0;
        int child1=(parent*2)+1;
        int child2=(parent*2)+2;
        int child=Integer.MIN_VALUE;

        while(child1<heap.size()){
            if(child2>=heap.size()){
                child=child1;
            }
	        else if(heap.get(child1)>=heap.get(child2)){
            	child=child1;
       	 	}
        	else if(heap.get(child1)<heap.get(child2)){
            	child=child2;
        	}
            if(heap.get(child) >heap.get(parent)){
				int temp = heap.get(child);
				heap.set(child, heap.get(parent));
				heap.set(parent, temp);
				parent = child;
				child1 = (parent*2) + 1;
                child2=(parent*2)+2;
			}else{
				return min;
			}
            
        }
        return min;
	}   
    
}